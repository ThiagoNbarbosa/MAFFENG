# Resumo dos Próximos Passos Recomendados para o Projeto MAFFENG

Após uma análise detalhada do repositório e do estado atual do projeto MAFFENG, identificamos um conjunto claro de ações prioritárias para estabilizar a base da aplicação e direcionar seu desenvolvimento futuro de forma coesa e eficiente. A principal e mais urgente necessidade é a **unificação do sistema de autenticação**, que atualmente apresenta uma duplicidade crítica entre o Supabase Auth (utilizado no frontend) e o Passport.js (implementado no backend). Essa inconsistência é a causa mais provável do problema de login relatado e impede o funcionamento correto da interação entre cliente e servidor.

Portanto, o primeiro passo fundamental é **centralizar toda a lógica de autenticação e gerenciamento de usuários no Supabase Auth**. Isso envolve remover a implementação baseada em Passport.js, `express-session` e as rotas de autenticação associadas no backend. Em substituição, o backend deverá ser adaptado para validar os tokens JWT gerados pelo Supabase Auth, que serão enviados pelo frontend a cada requisição à API. Essa validação garantirá que apenas usuários autenticados pelo Supabase possam acessar os recursos protegidos da API, estabelecendo um fluxo de autenticação único e consistente em toda a aplicação. A criação e gestão de usuários, incluindo contas administrativas, também devem ser migradas exclusivamente para as ferramentas e APIs do Supabase Auth.

Concomitantemente à unificação da autenticação, é essencial realizar uma **limpeza no código e nos artefatos relacionados aos sistemas legados ou redundantes**. Isso inclui a remoção do código de hashing de senhas (`scrypt`, `crypt()`) presente no backend e nos scripts SQL, a eliminação do script `create_test_users.sql` e a desativação ou remoção completa das dependências relacionadas ao Passport e gerenciamento de sessão no backend (`passport`, `passport-local`, `express-session`, `connect-pg-simple`). Essa limpeza simplificará a base de código, reduzirá a superfície de potenciais erros e facilitará a manutenção futura.

Outro ponto importante é **clarificar a arquitetura de dados e serviços de backend**. A presença de dependências e configurações que sugerem o uso do Neon DB (`@neondatabase/serverless`) e do Firebase (`firebase`) ao lado do Supabase (que já oferece banco de dados PostgreSQL e Storage) levanta questões sobre a real necessidade dessas tecnologias adicionais. Recomenda-se avaliar se o Supabase pode suprir todas as necessidades de banco de dados e armazenamento de arquivos, potencialmente simplificando a infraestrutura e reduzindo a complexidade ao eliminar dependências desnecessárias ou experimentais.

Uma vez que a base de autenticação e a arquitetura de backend estejam estabilizadas e clarificadas, o foco pode se voltar para a **estruturação do desenvolvimento das interfaces web e mobile**. Será necessário definir a estratégia para atender aos requisitos distintos dos engenheiros (web) e técnicos de campo (mobile), conforme detalhado nos guias subsequentes. Isso envolverá a decisão sobre abordagens de desenvolvimento (unificado vs. separado) e a implementação gradual de funcionalidades, começando pelo núcleo essencial da aplicação.

A implementação dessas etapas iniciais – unificação da autenticação, limpeza de código, clarificação da arquitetura e planejamento do desenvolvimento web/mobile – estabelecerá uma fundação sólida e coerente para o crescimento sustentável e eficiente do projeto MAFFENG.